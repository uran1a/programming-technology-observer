@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "programmingtechnology.observer.controllers.MainController",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_348607190 { 
   	label=observer
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_2006812991 { 
   	label=controllers
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   MainController1317092120[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)MainController</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   cp: ComponentProgress [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   cs: ComponentSlider [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   ct: ComponentText [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   imageView: ImageView [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   progressBar: ProgressBar [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   startButton: Button [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   stopButton: Button [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   subject: Subject [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   timerTextField: TextField [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- addObs()</TD></TR>
<TR><TD ALIGN="LEFT" >- delObs()</TD></TR>
<TR><TD ALIGN="LEFT" >+ initialize(url: URL, resourceBundle: ResourceBundle)</TD></TR>
<TR><TD ALIGN="LEFT" >- startHandler(event: MouseEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >- stopHandler(event: MouseEvent)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_2053242750 { 
   	label=models
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   ComponentProgress510763207[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ComponentProgress</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   progress: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   progressBar: ProgressBar [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   state: Boolean [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   subject: Subject [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ delComp(subject: Subject)</TD></TR>
<TR><TD ALIGN="LEFT" >+ offComp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ onComp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(st: Subject)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ComponentSlider510763207[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ComponentSlider</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   imageView1: ImageView [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   state: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   timeline: Timeline [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ delComp(subject: Subject)</TD></TR>
<TR><TD ALIGN="LEFT" >+ offComp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ onComp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(st: Subject)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ComponentText510763207[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ComponentText</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   dindon: TextField [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   state: Boolean [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   text: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ delComp(st: Subject)</TD></TR>
<TR><TD ALIGN="LEFT" >+ offComp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ onComp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(st: Subject)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ComponentVideo510763207[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ComponentVideo</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   file: File [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   mediaPlayer: MediaPlayer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   sound: Media [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   start: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   state: Boolean [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ delComp(subject: Subject)</TD></TR>
<TR><TD ALIGN="LEFT" >+ offComp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ onComp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(st: Subject)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_2081778963 { 
   	label=logics
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Observer539299420[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Observer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   subject: Subject [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ update(st: Subject)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Subject539299420[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Subject</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   d: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   observers: List&lt;Observer&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   p: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   state: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   timer: Timer [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ attach(observer: Observer)</TD></TR>
<TR><TD ALIGN="LEFT" >+ clean()</TD></TR>
<TR><TD ALIGN="LEFT" >+ detach(observer: Observer)</TD></TR>
<TR><TD ALIGN="LEFT" >+ notifyAllObservers()</TD></TR>
<TR><TD ALIGN="LEFT" >+ start(d: int, p: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ stop()</TD></TR>
<TR><TD ALIGN="LEFT" >- tick()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
ComponentProgress510763207 -> Subject539299420[label="subject
[0..1]"];
ComponentSlider510763207 -> Subject539299420[label="delComp() -> detach()"];
ComponentText510763207 -> Subject539299420[label="delComp() -> detach()"];
ComponentVideo510763207 -> Subject539299420[label="delComp() -> detach()"];
MainController1317092120 -> ComponentProgress510763207[label="cp
[0..1]"];
MainController1317092120 -> ComponentSlider510763207[label="cs
[0..1]"];
MainController1317092120 -> ComponentText510763207[label="ct
[0..1]"];
MainController1317092120 -> Subject539299420[label="subject
[0..1]"];
Observer539299420 -> ComponentProgress510763207[arrowhead=none, arrowtail=empty, dir=both];
Observer539299420 -> ComponentSlider510763207[arrowhead=none, arrowtail=empty, dir=both];
Observer539299420 -> ComponentText510763207[arrowhead=none, arrowtail=empty, dir=both];
Observer539299420 -> ComponentVideo510763207[arrowhead=none, arrowtail=empty, dir=both];
Observer539299420 -> Subject539299420[label="subject
[0..1]"];
Subject539299420 -> Observer539299420[label="observers
[0..*]"];
    
}
@enduml